USE Gringotts
    --Problem 1. Records’ Count

SELECT COUNT(Id) AS [Count]
FROM WizzardDeposits

	--Problem 2. Longest Magic Wand

SELECT MAX(MagicWandSize) AS LongestMagicWand
FROM WizzardDeposits

    --Problem 3. Longest Magic Wand per Deposit Groups

SELECT w.DepositGroup, MAX(w.MagicWandSize) AS LongestMagicWand
FROM WizzardDeposits AS w
GROUP BY w.DepositGroup

    --Problem 4. * Smallest Deposit Group per Magic Wand Size

SELECT TOP(2) w.DepositGroup
FROM WizzardDeposits AS w
GROUP BY w.DepositGroup
ORDER BY AVG(w.MagicWandSize)

    --Problem 5. Deposits Sum

SELECT w.DepositGroup, SUM(w.DepositAmount) AS TotalSum
FROM WizzardDeposits AS w
GROUP BY w.DepositGroup

	--Problem 6. Deposits Sum for Ollivander Family

SELECT w.DepositGroup,SUM(w.DepositAmount) AS TotalSum
FROM WizzardDeposits AS w
WHERE w.MagicWandCreator = 'Ollivander family'
GROUP BY w.DepositGroup


	--Problem 7. Deposits Filter

SELECT w.DepositGroup,SUM(w.DepositAmount) AS TotalSum
FROM WizzardDeposits AS w
WHERE w.MagicWandCreator = 'Ollivander family'
GROUP BY w.DepositGroup
HAVING SUM(w.DepositAmount)<150000
ORDER BY TotalSum DESC

	--	Problem 8.  Deposit Charge
	
SELECT w.DepositGroup, w.MagicWandCreator, MIN(w.DepositCharge) AS 'MinDepositCharge'
FROM WizzardDeposits AS w
GROUP BY w.DepositGroup, w.MagicWandCreator
ORDER BY w.MagicWandCreator ,w.DepositGroup

	--  Problem 9. Age Groups
	
-- I Way
SELECT
CASE
	when Age between 0 and 10 then '[0-10]'
	when Age between 11 and 20 then '[11-20]'
	when Age between 21 and 30 then '[21-30]'
	when Age between 31 and 40 then '[31-40]'
	when Age between 41 and 50 then '[41-50]'
	when Age between 51 and 60 then '[51-60]'
ELSE '[61+]'
END AS AgeGroup , COUNT(*) AS WizardCount
FROM WizzardDeposits
GROUP BY 
CASE
	when Age between 0 and 10 then '[0-10]'
	when Age between 11 and 20 then '[11-20]'
	when Age between 21 and 30 then '[21-30]'
	when Age between 31 and 40 then '[31-40]'
	when Age between 41 and 50 then '[41-50]'
	when Age between 51 and 60 then '[51-60]'
ELSE '[61+]'
END


-- II Way
SELECT WizzardDepositsBETA.Range AS AgeGroup, COUNT(*) AS WizzardCount
FROM
(SELECT
CASE
	when Age between 0 and 10 then '[0-10]'
	when Age between 11 and 20 then '[11-20]'
	when Age between 21 and 30 then '[21-30]'
	when Age between 31 and 40 then '[31-40]'
	when Age between 41 and 50 then '[41-50]'
	when Age between 51 and 60 then '[51-60]'
ELSE '[61+]'
END AS Range
FROM WizzardDeposits) AS WizzardDepositsBETA
GROUP BY Range

	--  Problem 10. First Letter
	
-- I Way
SELECT DISTINCT LEFT(FirstName,1) AS FirstLetter
FROM WizzardDeposits
WHERE DepositGroup = 'Troll Chest'
--ORDER BY FirstLetter
GROUP BY FirstName

--II Way
SELECT DISTINCT LEFT(FirstName,1) AS FirstLetter
FROM WizzardDeposits
WHERE DepositGroup = 'Troll Chest'
ORDER BY FirstLetter

	--  Problem 11. Average Interest 
	
SELECT DepositGroup, IsDepositExpired,AVG(DepositInterest) AS 'AverageInterest'
FROM WizzardDeposits
WHERE DepositStartDate >='01/01/1985'
GROUP BY DepositGroup , IsDepositExpired
ORDER BY DepositGroup DESC, IsDepositExpired

	--  Problem 12. * Rich Wizard, Poor Wizard
	
SELECT SUM([Difference]) AS SumDifference
FROM (SELECT FirstName AS [Host Wizard],
		DepositAmount AS [Host Wizard Deposit],
		LEAD (FirstName) OVER (ORDER BY Id) AS [Guest Wizard],
		LEAD (DepositAmount) OVER (ORDER BY Id) AS [Guest Wizard Deposit],
		DepositAmount -LEAD (DepositAmount) OVER (ORDER BY Id) AS [Difference]
FROM WizzardDeposits) AS Difftable

	--  Problem 13. Departments Total Salaries
	
USE SoftUni
SELECT DepartmentID, SUM(Salary) AS TotalSalary
FROM Employees
GROUP BY DepartmentID
ORDER BY DepartmentID

	--  Problem 14. Employees Minimum Salaries
	
SELECT DepartmentID, MIN(Salary) AS MinimumSalary
FROM Employees
WHERE DepartmentID IN (2, 5, 7) 
AND HireDate >= 01/01/2000 
GROUP BY DepartmentID

	--  Problem 15. Employees Average Salaries

SELECT * INTO NewEmployeesTable 
FROM Employees
WHERE Salary>30000 

DELETE FROM NewEmployeesTable 
WHERE ManagerID =42

UPDATE NewEmployeesTable
SET Salary += 5000 
WHERE DepartmentID = 1

SELECT DepartmentID, AVG(Salary) AS AverageSalary
FROM NewEmployeesTable
GROUP BY DepartmentID

	--  Problem 16. Employees Maximum Salaries

SELECT DepartmentID, MAX(Salary) AS MaxSalary
FROM Employees
GROUP BY DepartmentID
HAVING MAX(Salary)<30000 OR MAX(Salary)>70000

	--	Problem 17. Employees Count Salaries
SELECT COUNT (Salary) AS [COUNT]
FROM Employees
WHERE ManagerID IS NULL

	--	Problem 18. *3rd Highest Salary
	
USE SoftUni
SELECT DepartmentID, Salary AS [ThirdHighestSalary]
FROM	(SELECT DepartmentID,Salary, DENSE_RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS [Ranking] 
		FROM Employees GROUP BY DepartmentID,Salary) AS [RankTable]
WHERE Ranking=3

	--	Problem 19. **Salary Challenge

SELECT TOP (10) FirstName, LastName, DepartmentID
FROM Employees AS t1
WHERE Salary > 
  ( SELECT AVG(Salary) 
    FROM Employees as t2
    WHERE t1.DepartmentID=t2.DepartmentID )






























