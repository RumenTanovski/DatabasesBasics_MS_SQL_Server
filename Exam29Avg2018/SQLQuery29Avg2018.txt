CREATE DATABASE Supermarket
USE Supermarket


--	1. DDL

CREATE TABLE Categories(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL
)

CREATE TABLE Items(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL,
Price DECIMAL(15,2) NOT NULL,
CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL
)

CREATE TABLE Employees(
Id INT PRIMARY KEY IDENTITY,
[FirstName] NVARCHAR(50) NOT NULL,
[LastName] NVARCHAR(50) NOT NULL,
Phone CHAR(12) NOT NULL,
Salary DECIMAL(15,2) NOT NULL
)

CREATE TABLE Orders(
Id INT PRIMARY KEY IDENTITY,
[DateTime] DATETIME NOT NULL , 
EmployeeId INT NOT NULL FOREIGN KEY REFERENCES Employees(Id)
)

CREATE  TABLE OrderItems(
OrderId INT FOREIGN KEY REFERENCES Orders(Id),
ItemId INT FOREIGN KEY REFERENCES Items(Id),
Quantity INT NOT NULL CHECK(Quantity >=1),
PRIMARY KEY(OrderId,ItemId)
)

CREATE TABLE Shifts(
Id INT IDENTITY NOT NULL,
EmployeeId INT FOREIGN KEY REFERENCES Employees (Id)NOT NULL,
CheckIn DATETIME NOT NULL,
CheckOut DATETIME NOT NULL 
PRIMARY KEY (Id, EmployeeId)
)

ALTER TABLE Shifts
ADD CONSTRAINT CHK_CheckDates CHECK(CheckOut >CheckIn)

--    2. Insert
GO

INSERT INTO Employees(FirstName,LastName,Phone,Salary)
VALUES	('Stoyan','Petrov','888-785-8573',500.25),
		('Stamat','Nikolov','789-613-1122',999995.25),
		('Evgeni','Petkov','645-369-9517',1234.51),
		('Krasimir','Vidolov','321-471-9982',50.25)

INSERT INTO Items([Name],Price,CategoryId)
Values	('Tesla battery',154.25,8),
		('Chess',30.25,8),
		('Juice',5.32,1),
		('Glasses',10,8),
		('Bottle of water',1,1)


--	    3. Update
UPDATE Items
SET Price*=1.27
WHERE CategoryId IN (1,2,3)

--    4. Delete

DELETE FROM OrderItems
WHERE OrderID = 48

DELETE FROM Orders
WHERE Id=48

--    5. Richest People
SELECT Id, FirstName
FROM Employees
WHERE Salary> 6500
ORDER BY FirstName, Id

--	    6. Cool Phone Numbers

SELECT FirstName+' '+LastName AS [Full Name],
		Phone AS PhoneNumber
FROM Employees
WHERE Phone LIKE '3%'
ORDER BY FirstName, PhoneNumber

--     7. Employee Statistics

SELECT FirstName, LastName, COUNT(o.Id) AS [Count]
FROM Employees AS e
	JOIN Orders AS o
	ON e.Id = o.EmployeeId
GROUP BY FirstName,LastName
ORDER BY [Count] DESC, FirstName

--    8. Hard Workers Club
SELECT FirstName, LastName, AVG(DATEDIFF(HOUR,CheckIn,CheckOut)) AS [Work hours]
FROM Employees AS e
	LEFT JOIN Shifts AS s
	on e.Id =s.EmployeeId
GROUP BY FirstName,LastName, e.Id
HAVING AVG(DATEDIFF(HOUR,CheckIn,CheckOut)) > 7
ORDER BY [Work hours] DESC,e.Id


--    9. The Most Expensive Order

SELECT TOP (1)
  o.Id,
  SUM(i.Price * oi.Quantity) AS [TotalPrice]
FROM Orders As o
  JOIN OrderItems AS oi ON oi.OrderId = o.Id
  JOIN Items As i ON i.Id = oi.ItemId
GROUP BY o.Id
ORDER BY TotalPrice DESC

--    10. Rich Item, Poor Item
SELECT TOP(10) o.Id AS OrderId,
		MAX(i.Price) AS ExpensivePrice,
		MIN(i.Price) AS CheapPrice
FROM Orders As o
  JOIN OrderItems AS oi ON oi.OrderId = o.Id
  JOIN Items As i ON i.Id = oi.ItemId
GROUP BY o.Id
ORDER BY MAX(i.Price) DESC,o.Id
  
--    11. Cashiers
SELECT e.Id,e.FirstName,e.LastName
FROM Employees AS e
	JOIN Orders AS o
	ON e.Id=o.EmployeeId
GROUP BY e.Id,e.FirstName,e.LastName
ORDER BY e.Id


--    12. Lazy Employees

--    13. Sellers

--    14. Tough days


--    15. Top Order per Employee

SELECT emp.FirstName + ' ' + emp.LastName AS FullName,
	 DATEDIFF(HOUR, s.CheckIn, s.CheckOut) AS WorkHours,
	 e.TotalPrice AS TotalPrice 
FROM 
	(
    SELECT	o.EmployeeId, 
			SUM(oi.Quantity * i.Price) AS TotalPrice, 
			o.DateTime,
			ROW_NUMBER() OVER (PARTITION BY o.EmployeeId ORDER BY o.EmployeeId, 
							SUM(i.Price * oi.Quantity) DESC ) AS Rank
    FROM Orders AS o
    JOIN OrderItems AS oi ON oi.OrderId = o.Id
    JOIN Items AS i ON i.Id = oi.ItemId
	GROUP BY o.EmployeeId, o.Id, o.DateTime
	) AS e 
JOIN Employees AS emp 
ON emp.Id = e.EmployeeId
JOIN Shifts AS s 
ON s.EmployeeId = e.EmployeeId
WHERE e.Rank = 1 AND 
e.DateTime BETWEEN s.CheckIn AND s.CheckOut
ORDER BY FullName, WorkHours DESC, TotalPrice DESC



--    16. Average Profit per Day

--   17. Top Products

--    18. Promotion days
CREATE OR ALTER FUNCTION udf_GetPromotedProducts(@CurrentDate DATETIME , @StartDate DATETIME, @EndDate DATETIME, @Discount INT, @FirstItemId INT, @SecondItemId INT, @ThirdItemId INT)
RETURNS VARCHAR(100)
AS
BEGIN
	DECLARE @exist1 INT;
	SET @exist1 = 
		(
		SELECT TOP(1) Id
		FROM Items
		WHERE Id = @FirstItemId
		)

		DECLARE @exist2 INT;
		SET @exist2 = 
		(
		SELECT TOP(1) Id
		FROM Items
		WHERE Id = @SecondItemId
		)

		DECLARE @exist3 INT;
		SET @exist3 = 
		(
		SELECT TOP(1) Id
		FROM Items
		WHERE Id = @ThirdItemId
		)

	IF (@exist1 IS NULL OR @exist2 IS NULL OR @exist3 IS NULL ) 
		RETURN 'One of the items does not exists!'
	
	IF (@CurrentDate<@StartDate OR @CurrentDate>@EndDate)
		RETURN 'The current date is not within the promotion dates!'

	DECLARE @name1 NVARCHAR(30)=		
		(
		SELECT TOP(1) [Name]
		FROM Items
		WHERE Id = @FirstItemId
		)
	DECLARE @price1 DECIMAL(15,2)=		
		(
		SELECT TOP(1) [Price]
		FROM Items
		WHERE Id = @FirstItemId
		)

	DECLARE @name2 NVARCHAR(30)=		
		(
		SELECT TOP(1) [Name]
		FROM Items
		WHERE Id = @SecondItemId
		)
	DECLARE @price2 DECIMAL(15,2)=		
		(
		SELECT TOP(1) [Price]
		FROM Items
		WHERE Id = @SecondItemId
		)

	DECLARE @name3 NVARCHAR(30)=		
		(
		SELECT TOP(1) [Name]
		FROM Items
		WHERE Id = @ThirdItemId
		)
	DECLARE @price3 DECIMAL(15,2)=		
		(
		SELECT TOP(1) [Price]
		FROM Items
		WHERE Id = @ThirdItemId
		)


RETURN	CONCAT(@name1,' price: ',CAST(ROUND((@price1*(100-@Discount)/100),2)AS DECIMAL(15,2)),' <-> ',
		@name2,' price: ',CAST(ROUND((@price2*(100-@Discount)/100),2)AS DECIMAL(15,2)),' <-> ',
		@name3,' price: ',CAST(ROUND((@price3*(100-@Discount)/100),2)AS DECIMAL(15,2)))
END



--    19. Cancel order
CREATE PROC usp_CancelOrder(@OrderId INT, @CancelDate DATETIME)
AS
BEGIN
DECLARE @exist INT= 
		(
		SELECT TOP(1) Id
		FROM Orders
		WHERE Id = @OrderId
		)
IF(@exist IS NULL)
	BEGIN
	RAISERROR('The order does not exist!', 16, 1)
	RETURN
	END

DECLARE @diferance INT=
	(
	SELECT DATEDIFF(DAY,[DateTime],@CancelDate)
	FROM Orders
	WHERE Id = @OrderId	
	)
IF(@diferance>3)
	BEGIN
	RAISERROR('You cannot cancel the order!', 16, 1)
	RETURN
	END

DELETE FROM OrderItems
WHERE OrderId = @OrderId

DELETE FROM Orders
WHERE Id = @OrderId

END
--   20. Deleted Order



