CREATE DATABASE ExercisesRelations
USE ExercisesRelations

--    Problem 1. One-To-One Relationship

 CREATE TABLE Passports(
 PassportID INT PRIMARY KEY NOT NULL,
 PassportNumber CHAR(8)
 )

CREATE TABLE Persons(
PersonID INT PRIMARY KEY NOT NULL,
[FirstName] NVARCHAR (50) NOT NULL,
 Salary DECIMAL(7,2) NOT NULL,
 PassportID INT NOT NULL
 CONSTRAINT FK_Persons_Passports
  FOREIGN KEY (PassportID) 				
  REFERENCES Passports(PassportID)
 )
 
-- i pri ne vkarni danni ima 100/100, ama sa vkarani
INSERT INTO Passports(PassportID,PassportNumber )
	VALUES	(101,'N34FG21B'),
			(102, 'K65LO4R7'),
			(103, 'ZE657QP2')


 INSERT INTO Persons(PersonID, FirstName,Salary,PassportID)
	VALUES	(1, 'Roberto',43300.00,102),
			(2,'Tom', 56100.00, 103),
			(3,'Yana', 60200.00, 101)

--    Problem 2. One-To-Many Relationship
--
CREATE TABLE Manufacturers(
ManifacturerID INT PRIMARY KEY IDENTITY,
Name VARCHAR(15) NOT NULL,
EstabilshedOn DATE NOT NULL
)

CREATE TABLE Models (
ModelID INT PRIMARY KEY IDENTITY(101,1),
Name VARCHAR (100) NOT NULL,
ManifacturerID INT ,
FOREIGN KEY (ManifacturerID)  				
  REFERENCES Manufacturers(ManifacturerID)
)

INSERT INTO Manufacturers([Name],EstabilshedOn)
	VALUES	('BMW','07/03/1916'),
			( 'Tesla','01/01/2003'),
			( 'Lada', '01/05/1966')

INSERT INTO Models([Name], ManifacturerID)
	Values	('X1', 1),
			('i6', 1),
			('Model S', 2),
			('Model X', 2),
			('Model 3', 2),
			('Nova', 3)

--    Problem 3. Many-To-Many Relationship

CREATE  TABLE Students(
StudentID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR (30) 
)

CREATE TABLE Exams(
ExamID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR (30) 
)

CREATE TABLE StudentsExams(
StudentID INT ,
ExamID INT,
PRIMARY KEY(StudentID,ExamID),
FOREIGN KEY (StudentID)
REFERENCES Students(StudentID),
FOREIGN KEY (ExamID)
REFERENCES Exams(ExamID)
)

--Problem 4. Self-Referencing 
CREATE TABLE Teachers(
TeacherID INT PRIMARY KEY IDENTITY(101,1),
[Name] VARCHAR(30) NOT NULL,
ManagerID INT FOREIGN KEY 
REFERENCES Teachers(TeacherID)
)

--    Problem 5. Online Store Database
CREATE DATABASE Problem5
USE Problem5
-- Begin from clonе to stem :)
CREATE TABLE Cities(
CityID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50)
)

CREATE TABLE Customers(
CustomerID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50),
BirthDay DATE,
CityID INT FOREIGN KEY 
REFERENCES Cities(CityID)
)

CREATE TABLE Orders(
OrderID INT PRIMARY KEY IDENTITY,
CustomerID INT FOREIGN KEY 
REFERENCES Customers(CustomerID)
)

CREATE TABLE ItemTypes(
ItemTypeID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50)
)

CREATE TABLE Items(
ItemID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50),
ItemTypeID INT FOREIGN KEY
REFERENCES ItemTypes(ItemTypeID)
)

CREATE TABLE OrderItems(
OrderID INT ,
ItemID INT,
PRIMARY KEY (OrderID, ItemId),
FOREIGN KEY (OrderID)
REFERENCES Orders(OrderID),
FOREIGN KEY (ItemID)
REFERENCES Items(ItemID)
)

--     Problem 6. University Database
CREATE DATABASE Problem6
USE Problem6

CREATE TABLE Subjects(
SubjectID INT PRIMARY KEY IDENTITY,
SubjectName VARCHAR(50)
)

CREATE TABLE Majors(
MajorID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50)
)

CREATE TABLE Students(
StudentID INT PRIMARY KEY IDENTITY,
StudentNumber INT NOT NULL ,
StudentName VARCHAR(60) NOT NULL,
MajorID INT NOT NULL,
FOREIGN KEY (MajorID)
REFERENCES Majors(MajorID)
)

CREATE TABLE Agenda(
StudentID INT ,
SubjectID INT,
PRIMARY KEY (StudentID, SubjectID),
FOREIGN KEY (StudentID)
REFERENCES Students(StudentID),
FOREIGN KEY (SubjectID)
REFERENCES Subjects(SubjectID)
)

CREATE TABLE Payments(
PaymentID INT PRIMARY KEY IDENTITY,
PaymentDate DATE NOT NULL,
PaymentAmount DECIMAL (10,2),
StudentID INT NOT NULL,
FOREIGN KEY (StudentID)
REFERENCES Students(StudentID)
)

--    Problem 9. *Peaks in Rila
USE Geography

SELECT m.MountainRange, p.PeakName,p.Elevation
FROM Mountains AS m
	JOIN Peaks AS p
	ON p.MountainId =m.Id
WHERE m.MountainRange = 'Rila'
ORDER BY p.Elevation DESC
