USE SoftUni

--    Problem 1. Employee Address

SELECT TOP(5) e.EmployeeID , e.JobTitle, a.AddressID, a.AddressText
FROM Employees AS e
JOIN Addresses AS a
	ON e.AddressID = a.AddressID
ORDER BY a.AddressID

--    Problem 2. Addresses with Towns

SELECT TOP (50) e.FirstName,e.LastName, t.[Name], a.AddressText 
FROM Employees AS e
JOIN Addresses AS a
	ON e.AddressID = a.AddressID
JOIN Towns AS t
	ON t.TownID=a.TownID
ORDER BY e.FirstName , e.LastName
 
--     Problem 3. Sales Employee

SELECT e.EmployeeID, e.FirstName,e.LastName,d.[Name]
FROM Employees AS e
JOIN Departments AS d
	ON e.DepartmentID = d.DepartmentID
WHERE d.[Name] = 'Sales'
ORDER BY e.EmployeeID

--    Problem 4. Employee Departments

SELECT TOP(5) e.EmployeeID, e.FirstName, e.Salary, d.[Name]
FROM Employees AS e
	JOIN Departments AS d
	ON e.DepartmentID = d.DepartmentID
WHERE Salary >15000
ORDER BY d.DepartmentID

--    Problem 5. Employees Without Project

SELECT TOP(3) e.EmployeeID, e.FirstName
FROM Employees AS e
	LEFT JOIN EmployeesProjects AS ep
	ON e.EmployeeID = ep.EmployeeID	
WHERE ep.ProjectID IS NULL
ORDER BY e.EmployeeID

--    Problem 6. Employees Hired After

SELECT e.FirstName,e.LastName, e.HireDate, d.[Name] 
FROM Employees AS e
	JOIN Departments AS d
	ON e.DepartmentID = d.DepartmentID
WHERE e.HireDate > '1999-01-01' 
AND d.[Name] ='Sales' OR d.[Name]= 'Finance'
ORDER BY e.HireDate

--    Problem 7. Employees with Project

SELECT TOP(5) e.EmployeeID, e.FirstName, p.[Name]
FROM Employees AS e
	JOIN EmployeesProjects AS ep
	ON e.EmployeeID = ep.EmployeeID
	JOIN Projects AS p
	ON ep.ProjectID = p.ProjectID
WHERE p.StartDate > '2002-08-13' AND p.EndDate IS NULL
ORDER BY e.EmployeeID

--    Problem 8. Employee 24

SELECT e.EmployeeID,e.FirstName,
	CASE 
		WHEN DATEPART(YEAR,p.StartDate) >= 2005 THEN NULL
		ELSE p.[Name]
		END AS ProjectName
FROM Employees AS e
	JOIN EmployeesProjects AS ep
	ON e.EmployeeID=ep.EmployeeID
	JOIN Projects AS p
	ON ep.ProjectID=p.ProjectID
WHERE e.EmployeeID =24

--    Problem 9. Employee Manager

SELECT e.EmployeeID,e.FirstName, e.ManagerID, m.FirstName AS ManagerName
FROM Employees AS e
	JOIN Employees AS m
	ON e.ManagerID = m.EmployeeID
WHERE e.ManagerID IN (3,7)	
ORDER BY e.EmployeeID

--    Problem 10. Employee Summary

SELECT TOP(50) e.EmployeeID, 
CONCAT(e.FirstName,' ',e.LastName) AS EmployeeName,
CONCAT(m.FirstName,' ',m.LastName) AS ManagerName,
d.[Name] AS DepartmentName
FROM Employees AS e
	JOIN Employees AS m
	ON e.ManagerID  = m.EmployeeID
	JOIN Departments AS d
	ON e.DepartmentID = d.DepartmentID
ORDER BY e.EmployeeID

--	  Problem 11. Min Average Salary

SELECT MIN(Dep_AvgSalary.AvgSalary)
FROM 
	(SELECT e.DepartmentID, AVG(e.Salary) AS AvgSalary  
	FROM Employees AS e
	GROUP BY e.DepartmentID
	) AS Dep_AvgSalary

--	  Problem 12. Highest Peaks in Bulgaria
USE Geography

SELECT c.CountryCode,m.MountainRange,p.PeakName, p.Elevation
FROM Countries AS c
	JOIN MountainsCountries AS mc
	ON c.CountryCode = mc.CountryCode
	JOIN Mountains AS m
	ON mc.MountainId = m.Id
	JOIN Peaks AS p
	ON m.Id =p.MountainId
WHERE c.CountryCode='BG'AND p.Elevation >2835
ORDER BY p.Elevation DESC

--    Problem 13. Count Mountain Ranges

SELECT mc.CountryCode, COUNT(MountainRange)
FROM MountainsCountries AS mc
	JOIN Mountains AS m
	ON mc.MountainId = m.Id
WHERE mc.CountryCode IN ('BG','RU','US')
GROUP BY mc.CountryCode	

--    Problem 14. Countries with/without Rivers

SELECT TOP(5) c.CountryName, r.RiverName
FROM Countries AS c
	JOIN Continents AS co
	ON c.ContinentCode = co.ContinentCode
	LEFT Join CountriesRivers AS cr
	ON c.CountryCode = cr.CountryCode
	LEFT JOIN Rivers AS r
	ON cr.RiverId = r.Id
WHERE co.ContinentCode ='AF'
ORDER BY c.CountryName

--    Problem 15. *Continents and Currencies

SELECT k.ContinentCode, k.CurrencyCode,k.CountryOfCurrency
FROM	(
	SELECT	c.ContinentCode,
			c.CurrencyCode,
			COUNT (c.CurrencyCode) AS CountryOfCurrency,
			DENSE_RANK() OVER (PARTITION BY c.ContinentCode 
				ORDER BY COUNT(c.CurrencyCode) DESC) AS CurrencyRank
	FROM Countries AS c
		GROUP BY c.ContinentCode, c.CurrencyCode
		HAVING COUNT(c.CurrencyCode) >1  		
		) AS k
WHERE k.CurrencyRank =1
ORDER BY k.ContinentCode

--    Problem 16. Countries without any Mountains

SELECT COUNT(c.CountryCode) AS [Count]
FROM Countries AS c
	LEFT JOIN MountainsCountries AS mc
	ON c.CountryCode = mc.CountryCode
WHERE mc.MountainId IS NULL

--    Problem 17. Highest Peak and Longest River by Country

SELECT TOP(5) c.CountryName, 
			MAX(p.Elevation) AS HighestPeakElevation,
			MAX(r.Length) AS LongestRiverLength
FROM Countries AS c
	LEFT JOIN MountainsCountries AS mc
	ON c.CountryCode = mc.CountryCode
	LEFT JOIN Mountains AS m
	ON mc.MountainId = m.Id
	LEFT JOIN Peaks AS p
	ON m.Id = p.MountainId
	LEFT JOIN CountriesRivers AS cr
	ON c.CountryCode = cr.CountryCode
	LEFT JOIN Rivers AS r
	ON cr.RiverId = r.Id
GROUP BY c.CountryName
ORDER BY	[HighestPeakElevation] DESC ,
			[LongestRiverLength] DESC,
			c.CountryName

--    Problem 18. * Highest Peak Name and Elevation by Country
SELECT TOP(5) k.CountryName,k.[Highest Peak Name],
			  k.[Highest Peak Elevation],
			  k.Mountain 
FROM (
	SELECT 	c.CountryName,
		ISNULL(p.PeakName,'(no highest peak)') AS [Highest Peak Name],
		ISNULL(p.Elevation, '0') AS [Highest Peak Elevation],
		ISNULL(m.MountainRange,'(no mountain)') AS[Mountain],
		DENSE_RANK() OVER(PARTITION BY c.CountryName
					ORDER BY p.Elevation DESC) AS ElevationRank		
	FROM Countries AS c
	LEFT JOIN MountainsCountries AS mc
	ON c.CountryCode = mc.CountryCode
	LEFT JOIN Mountains AS m
	ON mc.MountainId = m.Id
	LEFT JOIN Peaks AS p
	ON m.Id = p.MountainId	
	) AS k
WHERE k.ElevationRank = 1
ORDER BY	k.CountryName, k.[Highest Peak Name]
