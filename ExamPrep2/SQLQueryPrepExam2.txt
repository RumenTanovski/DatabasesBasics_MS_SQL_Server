CREATE DATABASE School
USE School

DROP DATABASE School


CREATE TABLE Students(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(30) NOT NULL,
MiddleName NVARCHAR(25),
LastName NVARCHAR (30) NOT NULL,
Age INT 
CHECK (Age>0),
[Address] NVARCHAR (50),
Phone NCHAR(10) 
)

CREATE TABLE Subjects(
Id INT Primary KEY IDENTITY NOT NULL,
[Name] NVARCHAR(20) NOT NULL,
Lessons INT NOT NULL
CHECK (Lessons >0)
)

CREATE TABLE StudentsSubjects(
Id INT PRIMARY KEY IDENTITY,
StudentId INT NOT NULL
 FOREIGN KEY 				
 REFERENCES Students(Id),
SubjectId INT NOT NULL
 FOREIGN KEY (SubjectId) 				
  REFERENCES Subjects(Id),
Grade DECIMAL(15,2) NOT NULL
CHECK (Grade BETWEEN 2 AND 6)
)

CREATE TABLE Exams(
Id INT PRIMARY KEY IDENTITY,
[Date] DATETIME,
SubjectId INT NOT NULL
FOREIGN KEY (SubjectId) 				
  REFERENCES Subjects(Id)
  )

CREATE TABLE StudentsExams(
StudentId INT NOT NULL
FOREIGN KEY (StudentId)
 REFERENCES Students(Id),
ExamId INT NOT NULL
	FOREIGN KEY(ExamId)
	References Exams(Id),
Grade DECIMAL(15,2) NOT NULL
CHECK(Grade BETWEEN 2 AND 6),
PRIMARY KEY(StudentId,ExamId)
)

CREATE TABLE Teachers(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(20) NOT NULL,
LastName NVARCHAR(20) NOT NULL,
[Address] NVARCHAR(20) NOT NULL,
Phone CHAR(10),
SubjectId INT NOT NULL
FOREIGN KEY(SubjectId)
References Subjects(Id)
)
 
 CREATE TABLE StudentsTeachers(
StudentId INT NOT NULL
FOREIGN KEY (StudentId)
REFERENCES Students(Id),
TeacherId INT NOT NULL
FOREIGN KEY (TeacherId)
REFERENCES Teachers(Id),
PRIMARY KEY(StudentId,TeacherId)
)
 --2 INSERT

 INSERT INTO Teachers(FirstName,LastName, [Address],Phone, SubjectId)
 VALUES	('Ruthanne', 'Bamb', '84948 Mesta Junction', 3105500146,6),
		('Gerrard', 'Lowin', '370 Talisman Plaza', 3324874824,2),
		('Merrile' ,'Lambdin', '81 Dahle Plaza',4373065154,5),
		('Bert' , 'Ivie', '2 Gateway Circle', 4409584510,4)

INSERT INTO Subjects([Name], Lessons)
Values	('Geometry',12),
		('Health', 10),
		('Drama', 7),
		('Sports', 9)

-- 3 UPDATE

UPDATE StudentsSubjects
SET Grade =6.00
WHERE (SubjectId=1 OR SubjectId=2) AND Grade>=5.50

-- 4 DELETE

DELETE FROM StudentsTeachers
WHERE TeacherId IN
	(SELECT Id
	FROM Teachers
	WHERE Phone LIKE '%72%'
	) 

DELETE FROM Teachers
WHERE Id IN
	(SELECT Id
	FROM Teachers
	WHERE Phone LIKE '%72%'
	) 

--	    5. Teen Students

SELECT FirstName, LastName, Age
FROM Students
WHERE Age>=12
ORDER BY FirstName,LastName

--    6. Students Teachers

SELECT s.FirstName, s.LastName, 
		COUNT(st.TeacherId) AS TeachersCount
FROM Students AS s
 LEFT JOIN StudentsTeachers AS st
  ON s.Id = st.StudentId
GROUP BY s.FirstName, s.LastName
 
--     7. Students to Go  

SELECT CONCAT(s.FirstName,' ',s.LastName) AS [Full Name]
FROM Students AS s
	LEFT JOIN StudentsExams AS se
	ON s.Id = se.StudentId
WHERE Grade IS NULL
ORDER BY [Full Name]

--     8. Top Students

SELECT TOP(10) s.FirstName, s.LastName, cast(AVG(se.Grade) as decimal(10,2)) AS Grade
FROM Students AS s
	LEFT JOIN StudentsExams AS se
	ON s.Id = se.StudentId
GROUP BY s.FirstName, s.LastName
ORDER BY Grade DESC,s.FirstName, s.LastName

--    9. Not So In The Studying

SELECT	CASE 
			WHEN s.MiddleName IS NULL THEN CONCAT(s.FirstName,' ',s.LastName)
			ELSE CONCAT(s.FirstName,' ',s.MiddleName,' ',s.LastName) 
		END	AS [Full Name]
FROM Students AS s
 LEFT JOIN StudentsSubjects AS ss
 ON s.Id = ss.StudentId
 WHERE ss.Id IS NULL
ORDER BY [Full Name]

--      10. Average Grade per Subject

SELECT s.[Name],AVG(ss.Grade) AS [AverageGrade]
FROM Subjects AS s
	JOIN StudentsSubjects AS ss
	ON s.Id = ss.SubjectId	
GROUP BY s.[Name],s.Id
ORDER BY s.Id

--    11. Exam Grades
GO

CREATE FUNCTION udf_ExamGradesToUpdate(@studentId INT, @grade DECIMAL(8,2))
RETURNS VARCHAR(70) 
AS
BEGIN 
	DECLARE @exitORnotStudent NVARCHAR(50)
	SET @exitORnotStudent = 
		(
		SELECT TOP(1) Id
		FROM Students
		WHERE Id = @studentId
		)
	IF (@grade>6) RETURN 'Grade cannot be above 6.00!'
	ELSE IF (@exitORnotStudent IS NULL)
		RETURN 'The student with provided id does not exist in the school!';
	DECLARE @countGrade INT =	
		(
		SELECT COUNT(*)
		FROM Students AS s
			JOIN StudentsExams AS se
			ON s.Id =se.StudentId
		WHERE  Id = 12 AND Grade >=@grade AND Grade <=(@grade+0.50)
		)

	 DECLARE @firstName NVARCHAR(30)=
		(SELECT FirstName
		FROM Students
		WHERE Id = @studentId
		)
	RETURN CONCAT('You have to update ',@countGrade,' grades for the student ',@firstName) 
	
END


--    12. Exclude from school
GO

CREATE PROC usp_ExcludeFromSchool(@studentId INT)
AS
BEGIN
	DECLARE @exitORnotStudent NVARCHAR(50)
	SET @exitORnotStudent = 
		(
		SELECT TOP(1) Id
		FROM Students
		WHERE Id = @studentId
		)
	IF (@exitORnotStudent IS NULL)
		BEGIN
		RAISERROR('This school has no student with the provided id!', 16, 1)
		RETURN
		END
-- first where is FOREIGN KEY
	DELETE FROM StudentsExams
	WHERE StudentId =@studentId

	DELETE FROM StudentsTeachers
	WHERE StudentId =@studentId

	DELETE FROM StudentsSubjects
	WHERE StudentId =@studentId

	DELETE FROM Students
	WHERE Id =@studentId
END




